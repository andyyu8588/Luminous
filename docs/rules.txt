program      -> declaration*

declaration  -> classDecl | functionDecl | variableDecl | statement
classDecl    -> "class" ID "{" (variableDecl | functionDecl)* "}" ";"
functionDecl -> ID 
variableDecl -> ID "=" expression ";"

statement    -> exprStmt | forStmt | ifStmt | printStmt | returnStmt |
                whileStmt | addrStmt | atStmt | block
exprStmt     -> expression ";"
forStmt      -> "for" "(" (variableDecl | exprStmt)
ifStmt       -> "if" "(" expression ")" statement
                ("else if" "(" expression ")" statement)*
				("else" statement)? ";"
printStmt    -> "print" "(" expression ")" ";"
returnStmt   -> "return" expression? ";"
whileStmt    -> "while" "(" expression ")" statement ";"
addrStmt     -> "addr" "(" ID ")" ";"
atStmt       -> "at" "(" ID ")" ";"
block        -> "{" declaration* "}"

expression   -> assignment

assignment   -> (call ".")? ID "=" assignment | logic_or

logic_or     -> logic_and ("or" logic_and)*
logic_and    -> equality ("and" equality)*
equality     -> comparison (("not" "equals" | "equals") comparison)*
comparison   -> term ((">" | ">=" | "<" | "<=") term)*
term         -> factor (("-" | "+") factor)*
factor       -> unary (("/" | "*") unary)*

unary        -> ("not" | "-") unary | call;
call         -> primary ("(" arguments? ")" | "." ID)*
primary      -> "true" | "false" | "null" | "this" | NUMBER | STRING | ID | "(" expression ")"