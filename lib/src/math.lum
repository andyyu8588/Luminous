class Math {
	// helpers
	private validateNum(x) {
		if (not (type(x) equals "number")) {
			throw("ERROR: Expected number but found " + type(x) + ".");
		}
	}	

	private validateInteger(x) {
		this.validateNum(x);
		if (not (floor(x) equals ceil(x))) {
			throw("ERROR: Argument " + x + " must be an integer.");
		}
	}

	private validateNonNegativeInteger(x) {
		this.validateInteger(x);
		if (not (x >= 0)) {
			throw("ERROR: Argument " + x + " must be a positive integer.");
		}
	}


	public abs(x) {
		this.validateNum(x);
		if (x < 0) {
			return -x;
		}
		return x;
	}	

	public exp() {
		return 2.71828;
	}

	public factorial(x) {
		this.validateNonNegativeInteger(x);
		if (x < 1) {
			return 1;
		} else if (x > 1) {
			return x * this.factorial(x - 1);
		} else {
			return x;
		}
	}

	public isEven(x) {
		this.validateNum(x);
		return x % 2 equals 0;
	}

	public isOdd(x) {
		this.validateNum(x);
		return x % 2 equals 1;
	}

	public pi() {
		return 3.1415926;
	}

	public power(x, y) {
		this.validateNum(x);
		this.validateNonNegativeInteger(y);
		if (x equals 0) return 0;
		else if (x equals 1) return 1;
		result = 1;
		for (exponent from y to 0 by -1) {
			result = result * x;	
		}	
		return result;
	}
}